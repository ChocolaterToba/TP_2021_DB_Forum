// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a72dc82DecodeDbforumDomainEntity(in *jlexer.Lexer, out *RelatedObjectsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "related":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.RelatedObjects = make(map[string]bool)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 bool
					v1 = bool(in.Bool())
					(out.RelatedObjects)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity(out *jwriter.Writer, in RelatedObjectsInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"related\":"
		out.RawString(prefix[1:])
		if in.RelatedObjects == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.RelatedObjects {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.Bool(bool(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RelatedObjectsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDbforumDomainEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RelatedObjectsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDbforumDomainEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RelatedObjectsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDbforumDomainEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RelatedObjectsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDbforumDomainEntity(l, v)
}
func easyjson5a72dc82DecodeDbforumDomainEntity1(in *jlexer.Lexer, out *Posts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Posts, 0, 8)
			} else {
				*out = Posts{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v3 *Post
			if in.IsNull() {
				in.Skip()
				v3 = nil
			} else {
				if v3 == nil {
					v3 = new(Post)
				}
				(*v3).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v3)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity1(out *jwriter.Writer, in Posts) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v4, v5 := range in {
			if v4 > 0 {
				out.RawByte(',')
			}
			if v5 == nil {
				out.RawString("null")
			} else {
				(*v5).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Posts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDbforumDomainEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Posts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDbforumDomainEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Posts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDbforumDomainEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Posts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDbforumDomainEntity1(l, v)
}
func easyjson5a72dc82DecodeDbforumDomainEntity2(in *jlexer.Lexer, out *PostFullOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post":
			if in.IsNull() {
				in.Skip()
				out.PostOutput = nil
			} else {
				if out.PostOutput == nil {
					out.PostOutput = new(Post)
				}
				(*out.PostOutput).UnmarshalEasyJSON(in)
			}
		case "thread":
			if in.IsNull() {
				in.Skip()
				out.ThreadOutput = nil
			} else {
				if out.ThreadOutput == nil {
					out.ThreadOutput = new(Thread)
				}
				easyjson5a72dc82DecodeDbforumDomainEntity3(in, out.ThreadOutput)
			}
		case "forum":
			if in.IsNull() {
				in.Skip()
				out.ForumOutput = nil
			} else {
				if out.ForumOutput == nil {
					out.ForumOutput = new(Forum)
				}
				easyjson5a72dc82DecodeDbforumDomainEntity4(in, out.ForumOutput)
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.UserOutput = nil
			} else {
				if out.UserOutput == nil {
					out.UserOutput = new(User)
				}
				easyjson5a72dc82DecodeDbforumDomainEntity5(in, out.UserOutput)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity2(out *jwriter.Writer, in PostFullOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post\":"
		out.RawString(prefix[1:])
		if in.PostOutput == nil {
			out.RawString("null")
		} else {
			(*in.PostOutput).MarshalEasyJSON(out)
		}
	}
	if in.ThreadOutput != nil {
		const prefix string = ",\"thread\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeDbforumDomainEntity3(out, *in.ThreadOutput)
	}
	if in.ForumOutput != nil {
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeDbforumDomainEntity4(out, *in.ForumOutput)
	}
	if in.UserOutput != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeDbforumDomainEntity5(out, *in.UserOutput)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostFullOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDbforumDomainEntity2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostFullOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDbforumDomainEntity2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostFullOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDbforumDomainEntity2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostFullOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDbforumDomainEntity2(l, v)
}
func easyjson5a72dc82DecodeDbforumDomainEntity5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.Username = string(in.String())
		case "fullname":
			out.FullName = string(in.String())
		case "about":
			out.Description = string(in.String())
		case "email":
			out.EMail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.EMail))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeDbforumDomainEntity4(in *jlexer.Lexer, out *Forum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "user":
			out.Creator = string(in.String())
		case "slug":
			out.Forumname = string(in.String())
		case "posts":
			out.PostsCount = int(in.Int())
		case "threads":
			out.ThreadsCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity4(out *jwriter.Writer, in Forum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Forumname))
	}
	{
		const prefix string = ",\"posts\":"
		out.RawString(prefix)
		out.Int(int(in.PostsCount))
	}
	{
		const prefix string = ",\"threads\":"
		out.RawString(prefix)
		out.Int(int(in.ThreadsCount))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeDbforumDomainEntity3(in *jlexer.Lexer, out *Thread) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ThreadID = int(in.Int())
		case "slug":
			out.Threadname = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "author":
			out.Creator = string(in.String())
		case "forum":
			out.Forumname = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "votes":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity3(out *jwriter.Writer, in Thread) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ThreadID))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Threadname))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		out.String(string(in.Forumname))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"votes\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeDbforumDomainEntity6(in *jlexer.Lexer, out *PostEditInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity6(out *jwriter.Writer, in PostEditInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostEditInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDbforumDomainEntity6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostEditInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDbforumDomainEntity6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostEditInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDbforumDomainEntity6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostEditInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDbforumDomainEntity6(l, v)
}
func easyjson5a72dc82DecodeDbforumDomainEntity7(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.PostID = int(in.Int())
		case "parent":
			out.ParentID = int(in.Int())
		case "author":
			out.Creator = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "isEdited":
			out.IsEdited = bool(in.Bool())
		case "forum":
			out.Forumname = string(in.String())
		case "thread":
			out.ThreadID = int(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDbforumDomainEntity7(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostID))
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.Int(int(in.ParentID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"isEdited\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEdited))
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		out.String(string(in.Forumname))
	}
	{
		const prefix string = ",\"thread\":"
		out.RawString(prefix)
		out.Int(int(in.ThreadID))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDbforumDomainEntity7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDbforumDomainEntity7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDbforumDomainEntity7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDbforumDomainEntity7(l, v)
}
